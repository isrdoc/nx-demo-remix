{"version":3,"file":"main.js","mappings":";;;;;;;AAAA;;;;;;;ACAA;;;;;;;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBA;;;GAGG;;;AAEH,+CAAkC;AAClC,6FAA6C;AAE7C,MAAM,GAAG,GAAG,OAAO,EAAE;AAErB,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,EAAE;IACpC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACzD,MAAM,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC,KAAK;IAC1B,IAAI,CAAC,IAAI,EAAE;QACT,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;KACpB;IACD,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC;AACpD,CAAC,EAAC;AAEF,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI;AACrC,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACnC,OAAO,CAAC,GAAG,CAAC,iCAAiC,IAAI,EAAE,CAAC;AACtD,CAAC,CAAC;AACF,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC","sources":["webpack://nx-demo-remix/external commonjs \"express\"","webpack://nx-demo-remix/external commonjs \"tslib\"","webpack://nx-demo-remix/webpack/bootstrap","webpack://nx-demo-remix/./packages/notifications-service/src/main.ts"],"sourcesContent":["module.exports = require(\"express\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport * as express from 'express'\nimport * as mock_data from './mock_data.json'\n\nconst app = express()\n\napp.get('/search', async (req, res) => {\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n  const { type } = req.query\n  if (!type) {\n    res.json(mock_data)\n  }\n  res.send({ message: 'Welcome to notifications!' })\n})\n\nconst port = process.env.port || 3333\nconst server = app.listen(port, () => {\n  console.log(`Listening at http://localhost:${port}`)\n})\nserver.on('error', console.error)\n"],"names":[],"sourceRoot":""}